/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface EthereumDIDRegistryInterface extends utils.Interface {
  functions: {
    "owners(address)": FunctionFragment;
    "delegates(address,bytes32,address)": FunctionFragment;
    "nonce(address)": FunctionFragment;
    "changed(address)": FunctionFragment;
    "identityOwner(address)": FunctionFragment;
    "validDelegate(address,bytes32,address)": FunctionFragment;
    "changeOwner(address,address)": FunctionFragment;
    "changeOwnerSigned(address,uint8,bytes32,bytes32,address)": FunctionFragment;
    "addDelegate(address,bytes32,address,uint256)": FunctionFragment;
    "addDelegateSigned(address,uint8,bytes32,bytes32,bytes32,address,uint256)": FunctionFragment;
    "revokeDelegate(address,bytes32,address)": FunctionFragment;
    "revokeDelegateSigned(address,uint8,bytes32,bytes32,bytes32,address)": FunctionFragment;
    "setAttribute(address,bytes32,bytes,uint256)": FunctionFragment;
    "setAttributeSigned(address,uint8,bytes32,bytes32,bytes32,bytes,uint256)": FunctionFragment;
    "revokeAttribute(address,bytes32,bytes)": FunctionFragment;
    "revokeAttributeSigned(address,uint8,bytes32,bytes32,bytes32,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "owners"
      | "delegates"
      | "nonce"
      | "changed"
      | "identityOwner"
      | "validDelegate"
      | "changeOwner"
      | "changeOwnerSigned"
      | "addDelegate"
      | "addDelegateSigned"
      | "revokeDelegate"
      | "revokeDelegateSigned"
      | "setAttribute"
      | "setAttributeSigned"
      | "revokeAttribute"
      | "revokeAttributeSigned"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "owners", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delegates",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "nonce", values: [string]): string;
  encodeFunctionData(functionFragment: "changed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "identityOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validDelegate",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwnerSigned",
    values: [string, BigNumberish, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addDelegate",
    values: [string, BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addDelegateSigned",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDelegate",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDelegateSigned",
    values: [string, BigNumberish, BytesLike, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAttribute",
    values: [string, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAttributeSigned",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAttribute",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAttributeSigned",
    values: [string, BigNumberish, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "identityOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwnerSigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDelegateSigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeDelegateSigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAttributeSigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAttributeSigned",
    data: BytesLike
  ): Result;

  events: {
    "DIDOwnerChanged(address,address,uint256)": EventFragment;
    "DIDDelegateChanged(address,bytes32,address,uint256,uint256)": EventFragment;
    "DIDAttributeChanged(address,bytes32,bytes,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DIDOwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DIDDelegateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DIDAttributeChanged"): EventFragment;
}

export interface DIDOwnerChangedEventObject {
  identity: string;
  owner: string;
  previousChange: BigNumber;
}
export type DIDOwnerChangedEvent = TypedEvent<
  [string, string, BigNumber],
  DIDOwnerChangedEventObject
>;

export type DIDOwnerChangedEventFilter = TypedEventFilter<DIDOwnerChangedEvent>;

export interface DIDDelegateChangedEventObject {
  identity: string;
  delegateType: string;
  delegate: string;
  validTo: BigNumber;
  previousChange: BigNumber;
}
export type DIDDelegateChangedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  DIDDelegateChangedEventObject
>;

export type DIDDelegateChangedEventFilter =
  TypedEventFilter<DIDDelegateChangedEvent>;

export interface DIDAttributeChangedEventObject {
  identity: string;
  name: string;
  value: string;
  validTo: BigNumber;
  previousChange: BigNumber;
}
export type DIDAttributeChangedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  DIDAttributeChangedEventObject
>;

export type DIDAttributeChangedEventFilter =
  TypedEventFilter<DIDAttributeChangedEvent>;

export interface EthereumDIDRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EthereumDIDRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    owners(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    delegates(
      arg0: string,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nonce(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    changed(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    identityOwner(
      identity: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    validDelegate(
      identity: string,
      delegateType: BytesLike,
      delegate: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    changeOwner(
      identity: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeOwnerSigned(
      identity: string,
      sigV: BigNumberish,
      sigR: BytesLike,
      sigS: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addDelegate(
      identity: string,
      delegateType: BytesLike,
      delegate: string,
      validity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addDelegateSigned(
      identity: string,
      sigV: BigNumberish,
      sigR: BytesLike,
      sigS: BytesLike,
      delegateType: BytesLike,
      delegate: string,
      validity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeDelegate(
      identity: string,
      delegateType: BytesLike,
      delegate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeDelegateSigned(
      identity: string,
      sigV: BigNumberish,
      sigR: BytesLike,
      sigS: BytesLike,
      delegateType: BytesLike,
      delegate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAttribute(
      identity: string,
      name: BytesLike,
      value: BytesLike,
      validity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAttributeSigned(
      identity: string,
      sigV: BigNumberish,
      sigR: BytesLike,
      sigS: BytesLike,
      name: BytesLike,
      value: BytesLike,
      validity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeAttribute(
      identity: string,
      name: BytesLike,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeAttributeSigned(
      identity: string,
      sigV: BigNumberish,
      sigR: BytesLike,
      sigS: BytesLike,
      name: BytesLike,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  owners(arg0: string, overrides?: CallOverrides): Promise<string>;

  delegates(
    arg0: string,
    arg1: BytesLike,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  changed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  identityOwner(identity: string, overrides?: CallOverrides): Promise<string>;

  validDelegate(
    identity: string,
    delegateType: BytesLike,
    delegate: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  changeOwner(
    identity: string,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeOwnerSigned(
    identity: string,
    sigV: BigNumberish,
    sigR: BytesLike,
    sigS: BytesLike,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addDelegate(
    identity: string,
    delegateType: BytesLike,
    delegate: string,
    validity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addDelegateSigned(
    identity: string,
    sigV: BigNumberish,
    sigR: BytesLike,
    sigS: BytesLike,
    delegateType: BytesLike,
    delegate: string,
    validity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeDelegate(
    identity: string,
    delegateType: BytesLike,
    delegate: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeDelegateSigned(
    identity: string,
    sigV: BigNumberish,
    sigR: BytesLike,
    sigS: BytesLike,
    delegateType: BytesLike,
    delegate: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAttribute(
    identity: string,
    name: BytesLike,
    value: BytesLike,
    validity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAttributeSigned(
    identity: string,
    sigV: BigNumberish,
    sigR: BytesLike,
    sigS: BytesLike,
    name: BytesLike,
    value: BytesLike,
    validity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeAttribute(
    identity: string,
    name: BytesLike,
    value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeAttributeSigned(
    identity: string,
    sigV: BigNumberish,
    sigR: BytesLike,
    sigS: BytesLike,
    name: BytesLike,
    value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    owners(arg0: string, overrides?: CallOverrides): Promise<string>;

    delegates(
      arg0: string,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    changed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    identityOwner(identity: string, overrides?: CallOverrides): Promise<string>;

    validDelegate(
      identity: string,
      delegateType: BytesLike,
      delegate: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    changeOwner(
      identity: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOwnerSigned(
      identity: string,
      sigV: BigNumberish,
      sigR: BytesLike,
      sigS: BytesLike,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addDelegate(
      identity: string,
      delegateType: BytesLike,
      delegate: string,
      validity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addDelegateSigned(
      identity: string,
      sigV: BigNumberish,
      sigR: BytesLike,
      sigS: BytesLike,
      delegateType: BytesLike,
      delegate: string,
      validity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeDelegate(
      identity: string,
      delegateType: BytesLike,
      delegate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeDelegateSigned(
      identity: string,
      sigV: BigNumberish,
      sigR: BytesLike,
      sigS: BytesLike,
      delegateType: BytesLike,
      delegate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAttribute(
      identity: string,
      name: BytesLike,
      value: BytesLike,
      validity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAttributeSigned(
      identity: string,
      sigV: BigNumberish,
      sigR: BytesLike,
      sigS: BytesLike,
      name: BytesLike,
      value: BytesLike,
      validity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeAttribute(
      identity: string,
      name: BytesLike,
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeAttributeSigned(
      identity: string,
      sigV: BigNumberish,
      sigR: BytesLike,
      sigS: BytesLike,
      name: BytesLike,
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DIDOwnerChanged(address,address,uint256)"(
      identity?: string | null,
      owner?: null,
      previousChange?: null
    ): DIDOwnerChangedEventFilter;
    DIDOwnerChanged(
      identity?: string | null,
      owner?: null,
      previousChange?: null
    ): DIDOwnerChangedEventFilter;

    "DIDDelegateChanged(address,bytes32,address,uint256,uint256)"(
      identity?: string | null,
      delegateType?: null,
      delegate?: null,
      validTo?: null,
      previousChange?: null
    ): DIDDelegateChangedEventFilter;
    DIDDelegateChanged(
      identity?: string | null,
      delegateType?: null,
      delegate?: null,
      validTo?: null,
      previousChange?: null
    ): DIDDelegateChangedEventFilter;

    "DIDAttributeChanged(address,bytes32,bytes,uint256,uint256)"(
      identity?: string | null,
      name?: null,
      value?: null,
      validTo?: null,
      previousChange?: null
    ): DIDAttributeChangedEventFilter;
    DIDAttributeChanged(
      identity?: string | null,
      name?: null,
      value?: null,
      validTo?: null,
      previousChange?: null
    ): DIDAttributeChangedEventFilter;
  };

  estimateGas: {
    owners(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    delegates(
      arg0: string,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    changed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    identityOwner(
      identity: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validDelegate(
      identity: string,
      delegateType: BytesLike,
      delegate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeOwner(
      identity: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeOwnerSigned(
      identity: string,
      sigV: BigNumberish,
      sigR: BytesLike,
      sigS: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addDelegate(
      identity: string,
      delegateType: BytesLike,
      delegate: string,
      validity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addDelegateSigned(
      identity: string,
      sigV: BigNumberish,
      sigR: BytesLike,
      sigS: BytesLike,
      delegateType: BytesLike,
      delegate: string,
      validity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeDelegate(
      identity: string,
      delegateType: BytesLike,
      delegate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeDelegateSigned(
      identity: string,
      sigV: BigNumberish,
      sigR: BytesLike,
      sigS: BytesLike,
      delegateType: BytesLike,
      delegate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAttribute(
      identity: string,
      name: BytesLike,
      value: BytesLike,
      validity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAttributeSigned(
      identity: string,
      sigV: BigNumberish,
      sigR: BytesLike,
      sigS: BytesLike,
      name: BytesLike,
      value: BytesLike,
      validity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeAttribute(
      identity: string,
      name: BytesLike,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeAttributeSigned(
      identity: string,
      sigV: BigNumberish,
      sigR: BytesLike,
      sigS: BytesLike,
      name: BytesLike,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    owners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegates(
      arg0: string,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    identityOwner(
      identity: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validDelegate(
      identity: string,
      delegateType: BytesLike,
      delegate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeOwner(
      identity: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeOwnerSigned(
      identity: string,
      sigV: BigNumberish,
      sigR: BytesLike,
      sigS: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addDelegate(
      identity: string,
      delegateType: BytesLike,
      delegate: string,
      validity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addDelegateSigned(
      identity: string,
      sigV: BigNumberish,
      sigR: BytesLike,
      sigS: BytesLike,
      delegateType: BytesLike,
      delegate: string,
      validity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeDelegate(
      identity: string,
      delegateType: BytesLike,
      delegate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeDelegateSigned(
      identity: string,
      sigV: BigNumberish,
      sigR: BytesLike,
      sigS: BytesLike,
      delegateType: BytesLike,
      delegate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAttribute(
      identity: string,
      name: BytesLike,
      value: BytesLike,
      validity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAttributeSigned(
      identity: string,
      sigV: BigNumberish,
      sigR: BytesLike,
      sigS: BytesLike,
      name: BytesLike,
      value: BytesLike,
      validity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeAttribute(
      identity: string,
      name: BytesLike,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeAttributeSigned(
      identity: string,
      sigV: BigNumberish,
      sigR: BytesLike,
      sigS: BytesLike,
      name: BytesLike,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
