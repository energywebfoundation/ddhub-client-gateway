name: Build and publish images

on:
  push:
    branches: [ develop ]
    paths-ignore:
      - 'devops/**'
      - 'get-started/**'

env:
  SECRETS_ENGINE: vault

jobs:
  cancel-previous:
    name: 'Cancel Previous Runs'
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}

  unique_id:
    runs-on: ubuntu-latest
    steps:
      - name: Generate unique id
        id: unique_id
        run: echo "::set-output name=id::$(uuidgen)"
    outputs:
      unique_id: ${{ steps.unique_id.outputs.id }}

  build-scheduler:
    name: Build scheduler
    runs-on: ubuntu-latest
    needs: [cancel-previous, unique_id]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '16.14.2'
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install NX, NPM
        run: npm install -g nx npm@8.5.0
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: nx build dsb-client-gateway-scheduler --prod

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Build and push image (scheduler)'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker build -f ci/Docker/Dockerfile.scheduler -t energyweb/ddhub-client-gateway-scheduler .
          docker tag energyweb/ddhub-client-gateway-scheduler ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-scheduler:${{needs.unique_id.outputs.unique_id}}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-scheduler:${{needs.unique_id.outputs.unique_id}}
          docker tag energyweb/ddhub-client-gateway-scheduler ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-scheduler:canary
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-scheduler:canary

      - name: ArgoCD login
        uses: clowdhaus/argo-cd-action/@v1.12.1
        id: argocd_login
        with:
          command: login ${{ secrets.ARGOCD_DEV_URL }}
          options: --insecure --password ${{ secrets.ARGOCD_DEV_PASS }} --username ${{ secrets.ARGOCD_DEV_USERNAME }}

      - name: ArgoCD overwrite Dev scheduler image tag
        uses: clowdhaus/argo-cd-action/@v1.12.1
        id: argocd_image_tag_overwrite_dev_scheduler
        with:
          command: app set ddhub-gateway-dev
          options: -p ddhub-client-gateway-api.clientgateway.scheduler.image.tag=${{needs.unique_id.outputs.unique_id}}

      - name: ArgoCD overwrite Dev-1 scheduler image tag
        uses: clowdhaus/argo-cd-action/@v1.12.1
        id: argocd_image_tag_overwrite_dev1_scheduler
        with:
          command: app set ddhub-gateway-dev-1
          options: -p ddhub-client-gateway-api.clientgateway.scheduler.image.tag=${{needs.unique_id.outputs.unique_id}}
  build-be:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [cancel-previous, unique_id]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '16.14.2'
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install NX, NPM
        run: npm install -g nx npm@8.5.0
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: nx build dsb-client-gateway-api --prod
      - name: Build migrations
        run: npm run migrations:build
      - name: Generate version file
        run: echo ${{needs.unique_id.outputs.unique_id}} > version.md

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Build and push image (Back-end)'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker build -f ci/Docker/Dockerfile.backend -t energyweb/ddhub-client-gateway-backend .
          docker tag energyweb/ddhub-client-gateway-backend ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-backend:${{needs.unique_id.outputs.unique_id}}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-backend:${{needs.unique_id.outputs.unique_id}}
          docker tag energyweb/ddhub-client-gateway-backend ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-backend:canary
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-backend:canary

      - name: ArgoCD login
        uses: clowdhaus/argo-cd-action/@v1.12.1
        id: argocd_login
        with:
          command: login ${{ secrets.ARGOCD_DEV_URL }}
          options: --insecure --password ${{ secrets.ARGOCD_DEV_PASS }} --username ${{ secrets.ARGOCD_DEV_USERNAME }}

      - name: ArgoCD overwrite DEV image tag
        uses: clowdhaus/argo-cd-action/@v1.12.1
        id: argocd_image_tag_overwrite
        with:
          command: app set ddhub-gateway-dev
          options: -p ddhub-client-gateway-api.image.tag=${{needs.unique_id.outputs.unique_id}}

      - name: ArgoCD overwrite DEV-1 image tag
        uses: clowdhaus/argo-cd-action/@v1.12.1
        id: argocd_image_tag_dev1_overwrite
        with:
          command: app set ddhub-gateway-dev-1
          options: -p ddhub-client-gateway-api.image.tag=${{needs.unique_id.outputs.unique_id}}
  build-fe:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [cancel-previous, unique_id]
    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: ddhub
          POSTGRES_USER: ddhub
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '16.14.2'
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install NX, NPM
        run: npm install -g nx npm@8.5.0
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run export
        env:
          DB_NAME: postgresql://ddhub:ddhub@localhost:5432/ddhub
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Build and push image (Front-end)'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker build -f ci/Docker/Dockerfile.frontend -t energyweb/ddhub-client-gateway-frontend .
          docker tag energyweb/ddhub-client-gateway-frontend ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-frontend:${{needs.unique_id.outputs.unique_id}}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-frontend:${{needs.unique_id.outputs.unique_id}}
          docker tag energyweb/ddhub-client-gateway-frontend ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-frontend:canary
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-frontend:canary

      - name: ArgoCD login
        uses: clowdhaus/argo-cd-action/@v1.12.1
        id: argocd_login
        with:
          command: login ${{ secrets.ARGOCD_DEV_URL }}
          options: --insecure --password ${{ secrets.ARGOCD_DEV_PASS }} --username ${{ secrets.ARGOCD_DEV_USERNAME }}

      - name: ArgoCD overwrite DEV image tag
        uses: clowdhaus/argo-cd-action/@v1.12.1
        id: argocd_image_tag_overwrite_dev_ui
        with:
          command: app set ddhub-gateway-dev
          options: -p ddhub-client-gateway-api.clientgateway.ui.image.tag=${{needs.unique_id.outputs.unique_id}}

      - name: ArgoCD overwrite DEV-1 image tag
        uses: clowdhaus/argo-cd-action/@v1.12.1
        id: argocd_image_tag_overwrite_dev1_ui
        with:
          command: app set ddhub-gateway-dev-1
          options: -p ddhub-client-gateway-api.clientgateway.ui.image.tag=${{needs.unique_id.outputs.unique_id}}
