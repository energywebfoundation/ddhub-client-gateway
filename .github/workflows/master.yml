name: Build and publish images

on:
  push:
    branches: [ master, pre_release ]
    paths-ignore:
      - 'devops/**'
      - 'get-started/**'
env:
  SECRETS_ENGINE: vault

jobs:
  cancel-previous:
    name: 'Cancel Previous Runs'
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}

  semantic-version:
    name: Semantic release
    runs-on: ubuntu-latest
    needs: [cancel-previous]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: master
          pre_release_branches: pre_release
          default_prerelease_bump: preminor
          custom_release_rules: major:major:Major Changes,minor:minor:Minor Changes,chore:patch:Chores
    outputs:
      new_version: ${{ steps.tag_version.outputs.new_version }}
      changelog: ${{ steps.tag_version.outputs.changelog }}

  build-scheduler:
    name: Build scheduler
    runs-on: ubuntu-latest
    needs: [cancel-previous, semantic-version]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '16.14.2'
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install NX, NPM
        run: npm install -g nx npm@8.5.0
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: nx build dsb-client-gateway-scheduler --prod

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Build and push image (scheduler)'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker build -f ci/Docker/Dockerfile.scheduler -t energyweb/ddhub-client-gateway-scheduler .
          docker tag energyweb/ddhub-client-gateway-scheduler ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-scheduler:${{needs.semantic-version.outputs.new_version}}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-scheduler:${{needs.semantic-version.outputs.new_version}}
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            docker tag energyweb/ddhub-client-gateway-scheduler ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-scheduler:latest
            docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-scheduler:latest
          fi

      - name: Set ArgoCD Variable
        id: configure
        run: |
              echo "Running on branch ${{ github.ref }}"
              if [ "${{ github.ref }}" = "refs/heads/pre_release" ]; then
                echo "ENVIRONMENT=test" >> "$GITHUB_ENV"
                echo "ARGOCD_URL=${{ secrets.ARGOCD_DEV_URL }}" >> "$GITHUB_ENV"
                echo "ARGOCD_USERNAME=${{ secrets.ARGOCD_DEV_USERNAME }}" >> "$GITHUB_ENV"
                echo "ARGOCD_PWD=${{ secrets.ARGOCD_DEV_PASS }}" >> "$GITHUB_ENV"
              else
                echo "ENVIRONMENT=demo" >> "$GITHUB_ENV"
                echo "ARGOCD_URL=${{ secrets.ARGOCD_STAGING_URL }}" >> "$GITHUB_ENV"
                echo "ARGOCD_USERNAME=${{ secrets.ARGOCD_STAGING_USERNAME }}" >> "$GITHUB_ENV"
                echo "ARGOCD_PWD=${{ secrets.ARGOCD_STAGING_PASS }}" >> "$GITHUB_ENV"
              fi

      - name: ArgoCD login
        uses: clowdhaus/argo-cd-action/@v1.12.1
        id: argocd_login
        with:
          command: login ${{ env.ARGOCD_URL }}
          options: --insecure --password ${{ env.ARGOCD_PWD }} --username ${{ env.ARGOCD_USERNAME }}

      - name: ArgoCD overwrite target scheduler image tag
        uses: clowdhaus/argo-cd-action/@v1.12.1
        id: argocd_image_tag_overwrite_target_scheduler
        with:
          command: app set ddhub-gateway-${{ env.ENVIRONMENT }}
          options: -p ddhub-client-gateway-api.clientgateway.scheduler.image.tag=${{needs.semantic-version.outputs.new_version}}

      - name: ArgoCD overwrite target scheduler-1 image tag
        uses: clowdhaus/argo-cd-action/@v1.12.1
        if: github.ref == 'refs/heads/pre_release'
        id: argocd_image_tag_overwrite_target_scheduler1
        with:
          command: app set ddhub-gateway-${{ env.ENVIRONMENT }}-1
          options: -p ddhub-client-gateway-api.clientgateway.scheduler.image.tag=${{needs.semantic-version.outputs.new_version}}

#      - name: ArgoCD overwrite QA image tag
#        uses: clowdhaus/argo-cd-action/@v1.12.1
#        id: argocd_image_tag_overwrite_qa_scheduler
#        with:
#          command: app set ddhub-gateway-qa
#          options: -p ddhub-client-gateway-api.clientgateway.scheduler.image.tag=${{needs.semantic-version.outputs.new_version}}
#
#      - name: ArgoCD overwrite QA-1 image tag
#        uses: clowdhaus/argo-cd-action/@v1.12.1
#        id: argocd_image_tag_overwrite_qa1_scheduler
#        with:
#          command: app set ddhub-gateway-qa-1
#          options: -p ddhub-client-gateway-api.clientgateway.scheduler.image.tag=${{needs.semantic-version.outputs.new_version}}
#
#      - name: ArgoCD overwrite TRIAL image tag
#        uses: clowdhaus/argo-cd-action/@v1.12.1
#        id: argocd_image_tag_overwrite_trial_scheduler
#        with:
#          command: app set ddhub-gateway-trial
#          options: -p ddhub-client-gateway-api.clientgateway.scheduler.image.tag=${{needs.semantic-version.outputs.new_version}}
  build-be:
    name: Build Backend & Release
    runs-on: ubuntu-latest
    needs: [cancel-previous, semantic-version]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '16.14.2'
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install NX, NPM
        run: npm install -g nx npm@8.5.0
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: nx build dsb-client-gateway-api --prod
      - name: Build migrations
        run: npm run migrations:build
      - name: Generate version file
        run: echo ${{needs.semantic-version.outputs.new_version}} > version.md

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Build and push image (Back-end)'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker build -f ci/Docker/Dockerfile.backend -t energyweb/ddhub-client-gateway-backend .
          docker tag energyweb/ddhub-client-gateway-backend ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-backend:${{needs.semantic-version.outputs.new_version}}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-backend:${{needs.semantic-version.outputs.new_version}}
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            docker tag energyweb/ddhub-client-gateway-backend ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-backend:latest
            docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-backend:latest
          fi

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        if: github.ref == 'refs/heads/master'
        with:
          tag: ${{ needs.semantic-version.outputs.new_version }}
          name: Release ${{ needs.semantic-version.outputs.new_version }}
          body: ${{ needs.semantic-version.outputs.changelog }}

      - name: Set ArgoCD Variable
        id: configure
        run: |
              echo "Running on branch ${{ github.ref }}"
              if [ "${{ github.ref }}" = "refs/heads/pre_release" ]; then
                echo "ENVIRONMENT=test" >> "$GITHUB_ENV"
                echo "ARGOCD_URL=${{ secrets.ARGOCD_DEV_URL }}" >> "$GITHUB_ENV"
                echo "ARGOCD_USERNAME=${{ secrets.ARGOCD_DEV_USERNAME }}" >> "$GITHUB_ENV"
                echo "ARGOCD_PWD=${{ secrets.ARGOCD_DEV_PASS }}" >> "$GITHUB_ENV"
              else
                echo "ENVIRONMENT=demo" >> "$GITHUB_ENV"
                echo "ARGOCD_URL=${{ secrets.ARGOCD_STAGING_URL }}" >> "$GITHUB_ENV"
                echo "ARGOCD_USERNAME=${{ secrets.ARGOCD_STAGING_USERNAME }}" >> "$GITHUB_ENV"
                echo "ARGOCD_PWD=${{ secrets.ARGOCD_STAGING_PASS }}" >> "$GITHUB_ENV"
              fi

      - name: ArgoCD login
        uses: clowdhaus/argo-cd-action/@v1.12.1
        id: argocd_login
        with:
          command: login ${{ env.ARGOCD_URL }}
          options: --insecure --password ${{ env.ARGOCD_PWD }} --username ${{ env.ARGOCD_USERNAME }}

      - name: ArgoCD overwrite target api image tag
        uses: clowdhaus/argo-cd-action/@v1.12.1
        id: argocd_image_tag_overwrite_target_api
        with:
          command: app set ddhub-gateway-${{ env.ENVIRONMENT }}
          options: -p ddhub-client-gateway-api.image.tag=${{needs.semantic-version.outputs.new_version}}

      - name: ArgoCD overwrite target api-1 image tag
        uses: clowdhaus/argo-cd-action/@v1.12.1
        if: github.ref == 'refs/heads/pre_release'
        id: argocd_image_tag_overwrite_target_api_1
        with:
          command: app set ddhub-gateway-${{ env.ENVIRONMENT }}-1
          options: -p ddhub-client-gateway-api.image.tag=${{needs.semantic-version.outputs.new_version}}
#
#      - name: ArgoCD overwrite QA image tag
#        uses: clowdhaus/argo-cd-action/@v1.12.1
#        id: argocd_image_tag_overwrite_qa_api
#        with:
#          command: app set ddhub-gateway-qa
#          options: -p ddhub-client-gateway-api.image.tag=${{needs.semantic-version.outputs.new_version}}
#
#      - name: ArgoCD overwrite QA-1 image tag
#        uses: clowdhaus/argo-cd-action/@v1.12.1
#        id: argocd_image_tag_overwrite_qa1_api
#        with:
#          command: app set ddhub-gateway-qa-1
#          options: -p ddhub-client-gateway-api.image.tag=${{needs.semantic-version.outputs.new_version}}
#
#      - name: ArgoCD overwrite TRIAL image tag
#        uses: clowdhaus/argo-cd-action/@v1.12.1
#        id: argocd_image_tag_overwrite_trial_api
#        with:
#          command: app set ddhub-gateway-trial
#          options: -p ddhub-client-gateway-api.image.tag=${{needs.semantic-version.outputs.new_version}}

  build-fe:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [cancel-previous, semantic-version]
    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: ddhub
          POSTGRES_USER: ddhub
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '16.14.2'
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install NX, NPM
        run: npm install -g nx npm@8.5.0
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run export
        env:
          DB_NAME: postgresql://ddhub:ddhub@localhost:5432/ddhub
          NEXT_PUBLIC_CUSTOM_BRANDING_PATH: '/aemo-logo.svg'
          NEXT_PUBLIC_CUSTOM_CGW_NAME: 'WA Unregistered Equipment Portal'

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Build and push image (Front-end)'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker build -f ci/Docker/Dockerfile.frontend -t energyweb/ddhub-client-gateway-frontend .
          docker tag energyweb/ddhub-client-gateway-frontend ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-frontend:${{needs.semantic-version.outputs.new_version}}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-frontend:${{needs.semantic-version.outputs.new_version}}
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            docker tag energyweb/ddhub-client-gateway-frontend ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-frontend:latest
            docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/ddhub-client-gateway-frontend:latest
          fi

      - name: Set ArgoCD Variable
        id: configure
        run: |
              echo "Running on branch ${{ github.ref }}"
              if [ "${{ github.ref }}" = "refs/heads/pre_release" ]; then
                echo "ENVIRONMENT=test" >> "$GITHUB_ENV"
                echo "ARGOCD_URL=${{ secrets.ARGOCD_DEV_URL }}" >> "$GITHUB_ENV"
                echo "ARGOCD_USERNAME=${{ secrets.ARGOCD_DEV_USERNAME }}" >> "$GITHUB_ENV"
                echo "ARGOCD_PWD=${{ secrets.ARGOCD_DEV_PASS }}" >> "$GITHUB_ENV"
              else
                echo "ENVIRONMENT=demo" >> "$GITHUB_ENV"
                echo "ARGOCD_URL=${{ secrets.ARGOCD_STAGING_URL }}" >> "$GITHUB_ENV"
                echo "ARGOCD_USERNAME=${{ secrets.ARGOCD_STAGING_USERNAME }}" >> "$GITHUB_ENV"
                echo "ARGOCD_PWD=${{ secrets.ARGOCD_STAGING_PASS }}" >> "$GITHUB_ENV"
              fi

      - name: ArgoCD login
        uses: clowdhaus/argo-cd-action/@v1.12.1
        id: argocd_login
        with:
          command: login ${{ env.ARGOCD_URL }}
          options: --insecure --password ${{ env.ARGOCD_PWD }} --username ${{ env.ARGOCD_USERNAME }}

      - name: ArgoCD overwrite target image tag
        uses: clowdhaus/argo-cd-action/@v1.12.1
        id: argocd_image_tag_overwrite_target_ui
        with:
          command: app set ddhub-gateway-${{ env.ENVIRONMENT }}
          options: -p ddhub-client-gateway-api.clientgateway.ui.image.tag=${{needs.semantic-version.outputs.new_version}}

      - name: ArgoCD overwrite target UI-1 image tag
        uses: clowdhaus/argo-cd-action/@v1.12.1
        if: github.ref == 'refs/heads/pre_release'
        id: argocd_image_tag_overwrite_target_ui_1
        with:
          command: app set ddhub-gateway-${{ env.ENVIRONMENT }}-1
          options: -p ddhub-client-gateway-api.clientgateway.ui.image.tag=${{needs.semantic-version.outputs.new_version}}

#      - name: ArgoCD overwrite QA image tag
#        uses: clowdhaus/argo-cd-action/@v1.12.1
#        id: argocd_image_tag_overwrite_qa_ui
#        with:
#          command: app set ddhub-gateway-qa
#          options: -p ddhub-client-gateway-api.clientgateway.ui.image.tag=${{needs.semantic-version.outputs.new_version}}
#
#      - name: ArgoCD overwrite QA-1 image tag
#        uses: clowdhaus/argo-cd-action/@v1.12.1
#        id: argocd_image_tag_overwrite_qa1_ui
#        with:
#          command: app set ddhub-gateway-qa-1
#          options: -p ddhub-client-gateway-api.clientgateway.ui.image.tag=${{needs.semantic-version.outputs.new_version}}
#
#      - name: ArgoCD overwrite TRIAL image tag
#        uses: clowdhaus/argo-cd-action/@v1.12.1
#        id: argocd_image_tag_overwrite_trial_ui
#        with:
#          command: app set ddhub-gateway-trial
#          options: -p ddhub-client-gateway-api.clientgateway.ui.image.tag=${{needs.semantic-version.outputs.new_version}}
